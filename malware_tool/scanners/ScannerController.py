"""
Date:        4/18/2025 
Class:       ScannerController
Description: This class is responsible for managing all the different sub-scanners,
             and navigating through the user's file directories recursively.
"""
from scanners.signature_scanner import SignatureScanner
from structs import Scan_Overview, File_Scan_Report
from database_handler import Database_Handler
import os
import json
from typing import List

class ScannerController():
    def __init__(self):
        self.db_handler = Database_Handler()
        self.signature_scanner = SignatureScanner(self.db_handler)

    def __generate_scan_overview(self, file_scan_reports: List[File_Scan_Report], scan_path:str):
        files_scanned = [file_scan_report.path for file_scan_report in file_scan_reports]
        malicious_files = [file_scan_report.path for file_scan_report in file_scan_reports if file_scan_report.is_malware]

        return Scan_Overview(
            contains_malicious_files= len(malicious_files) > 0,
            scan_path= scan_path,
            files_scanned= json.dumps(files_scanned),
            malicous_files= json.dumps(malicious_files)
        )

    def scan_directory(self, path):
        file_scan_reports: List[File_Scan_Report] = []

        absoulte_path = os.path.abspath(path)

        for dirpath, _, filenames in os.walk(absoulte_path):
            for filename in filenames:
                file_path = os.path.join(dirpath, filename)
                file_scan_report = self.signature_scanner.scan(file_path)

                if file_scan_report:
                    self.db_handler.insert_file_scan_report(file_scan_report)
                    file_scan_reports.append(file_scan_report)
            
        scan_overview = self.__generate_scan_overview(
            file_scan_reports= file_scan_reports,
            scan_path= absoulte_path
        )

        self.db_handler.insert_scan_overview(scan_overview)
        return scan_overview


