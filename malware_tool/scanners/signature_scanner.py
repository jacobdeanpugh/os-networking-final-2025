"""
Date:        4/14/2025 
Class:       SignatureScanner
Description: This class is responsible for implmenting the SHA256
             signature based scanning functionality. This class inherits
             the parent scanner class, and utilizes the database_handler.
             The goal should be for this class to eventually output a 
             Scan_Result object to the DB.
"""
from structs import File_Scan_Report
from scanners.scanner import Scanner
import utils
import os
from tqdm import tqdm
from typing import List
import logging
logger = logging.getLogger(__name__)

class SignatureScanner(Scanner):
    
    def __init__(self, db_handler):
        super().__init__(db_handler)

    def scan_file(self, path):
        if os.path.isdir(path):
            raise Exception("Error expected file path but got directory instead")
        
        absolute_path = os.path.abspath(path)
        file_size = os.path.getsize(absolute_path)
        # Skips the file if its too large
        if file_size < 104857600:
            file_hash = utils.hash_file_chunked(absolute_path)

            has_signature = self.db_handler.search_signatures_table(file_hash)
        else:
            has_signature = None

        return File_Scan_Report(
            path=absolute_path,
            size_bytes=file_size,
            sha256=None,
            is_malware= True if has_signature else False,
            scan_type="signature"
        )
    
    def scan(self, path):
        file_scan_reports: List[File_Scan_Report] = []

        absolute_path = os.path.abspath(path)
        logger.info(f"Starting Scan on {absolute_path}")

        # Collect all file paths first so tqdm can track total progress
        all_files = []
        for dirpath, _, filenames in os.walk(absolute_path):
            for filename in filenames:
                file_path = os.path.join(dirpath, filename)
                all_files.append(file_path)

        for file_path in tqdm(all_files, desc="Signature Scan", unit="file"):
            file_scan_report = self.scan_file(file_path)
            if file_scan_report:
                file_scan_reports.append(file_scan_report)

        return file_scan_reports
            