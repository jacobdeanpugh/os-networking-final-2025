"""
Date:        4/10/2025 
Class:       Database_Handler
Description: This class will be incharge of maintaining and accessing the local db file. The database
             will be SQLite, allowing for flexible and quick storage. The schema is contained in 
             database/schema.sql
"""
from scanner import Scan_Result

import os
import json
import sqlite3
import logging
logger = logging.getLogger(__name__)

class Database_Handler():
    def __init__(self):
        self.sql_scripts_dir_path = os.path.join(os.path.dirname(__file__), 'database')
        self.db_file_path = os.path.join(self.sql_scripts_dir_path, 'local_db.sqlite')
        self.conn = sqlite3.connect(self.db_file_path)

    # Executes Schema SQL file
    def initialze_database(self):
        logger.info(" Initializing Database")
        try:
            with open(os.path.join(self.sql_scripts_dir_path, 'schema.sql'), 'r') as f:
                schema_sql = f.read()

            self.conn.executescript(schema_sql)
            self.conn.commit()
        except Exception as e:
            logger.error(f" Issue Initializing DB{e}: ")

    # Inserts Scan Results Data Class into scan_history table
    def insert_scan_results(self, scan_result:Scan_Result):
        with open(os.path.join(self.sql_scripts_dir_path, 'scan_history_insert.sql'), 'r') as f:
            script = f.read()

        cursor = self.conn.cursor()
        cursor.execute(script,(
            scan_result.contains_malicious_files,
            scan_result.scan_path,
            json.dumps(scan_result.files_scanned),
            json.dumps(scan_result.malicous_files),
            scan_result.timestamp
        ))
        
        self.conn.commit()
        cursor.close()

    