"""
Date:        4/10/2025 
Class:       N/A
Description: This file will serve as the main driver file. All objects should be imported
             and orchastrated from here. This should also serve as the main entry point, 
             and parse any arguments passed in the Command Line Interface (CLI)
"""
import utils
from scanners.ScannerController import ScannerController
from database_handler import Database_Handler

from structs import *
logger = utils.logging.getLogger(__name__)
import argparse

def parse_args():
    parser = argparse.ArgumentParser(description="Malware Scanner Tool")
    subparsers = parser.add_subparsers(dest="command")
    subparsers.required = True

    scan_parser = subparsers.add_parser("scan", help="Scan a directory or file")
    scan_parser.add_argument("path", nargs="?", help="Path to the directory or file to scan")  # now optional
    scan_parser.add_argument("--file_scan", action="store_true", help="Scan a file")
    scan_parser.add_argument("--process_scan", action="store_true", help="Scan a process")

    update_parser = subparsers.add_parser("update", help="Update the database with new signatures")

    report_scanner_parser = subparsers.add_parser("report", help="Generate a report of the scan results")
    report_scanner_parser.add_argument("path", help="Path to the report file")
    return parser.parse_args()

def main():
    utils.setup_logger()
    args = parse_args()
    scanner_controller = ScannerController()
    db_handler = Database_Handler()

    if args.command == "scan":
        if args.file_scan:
            scan_overview = scanner_controller.file_scan(args.path)
            scanner_controller.output_summary(scan_overview)
        elif args.process_scan:
            scan_overview = scanner_controller.process_scan()
            scanner_controller.output_summary(scan_overview)
        else:
            scan_overview = scanner_controller.health_scan(args.path)
            scanner_controller.output_summary(scan_overview)
    elif args.command == "update":
        db_handler.refresh_signatures()
    elif args.command == "report":
        report = db_handler.fetch_recent_scan_overview()
        if report:
            scanner_controller.generate_report(report, args.path)
            logger.info(f"Report generated at {args.path}")
        else:
            logger.info("No scan reports found in the database.")
    else:
        logger.error("Invalid command. Use 'scan', 'update', or 'report'.")
        logger.info("Use 'scan', 'update', or 'report' commands.")


if __name__ == "__main__":
    main()